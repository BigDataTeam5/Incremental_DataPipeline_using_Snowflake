name: CO2 Data Pipeline CI/CD

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Debug Environment Variables
        run: |
          echo "SNOWFLAKE_ACCOUNT=${{ secrets.SNOWFLAKE_ACCOUNT }}"
          echo "SNOWFLAKE_USER=${{ secrets.SNOWFLAKE_USER }}"
          echo "SNOWFLAKE_PASSWORD=${{ secrets.SNOWFLAKE_PASSWORD }}"
          echo "SNOWFLAKE_WAREHOUSE=${{ secrets.SNOWFLAKE_WAREHOUSE }}"
          echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}"
          echo "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}"
      - name: Run tests
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: CO2_ROLE
          SNOWFLAKE_WAREHOUSE: CO2_WH
          SNOWFLAKE_SCHEMA: RAW_CO2
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
        run: |
          cd tests
          pytest testing_snowflake_connection.py
          pytest testing_s3_connection.py
          pytest testing_volatility_co2ppm.py
          pytest testing_daily_percent_change.py
          pytest testing_weekly_changes.py
          cd ../..

  deploy:
    needs: test
    if: success() && (github.event_name != 'pull_request')
    runs-on: ubuntu-latest
    env:
      SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
      SNOWFLAKE_ROLE: CO2_ROLE
      SNOWFLAKE_WAREHOUSE: CO2_WH
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      DATABASE_NAME: ${{ secrets.DATABASE_NAME }}  # Add if needed for your setup
      SCHEMA_NAME: ${{ secrets.SCHEMA_NAME }}      # Add if needed for your setup

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set environment variables
        run: |
          echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}" >> $GITHUB_ENV
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
            echo "DATABASE_NAME=CO2_DB_PROD" >> $GITHUB_ENV
            echo "CONN_PROFILE=prod" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
            echo "DATABASE_NAME=CO2_DB_DEV" >> $GITHUB_ENV
            echo "CONN_PROFILE=dev" >> $GITHUB_ENV
          fi

      - name: Debug Environment Variables Before Deployment
        run: |
          echo "ENVIRONMENT=$ENVIRONMENT"
          echo "DATABASE_NAME=$DATABASE_NAME"
          echo "CONN_PROFILE=$CONN_PROFILE"
          echo "SNOWFLAKE_ACCOUNT=$SNOWFLAKE_ACCOUNT"
          echo "SNOWFLAKE_USER=$SNOWFLAKE_USER"
          echo "SNOWFLAKE_WAREHOUSE=$SNOWFLAKE_WAREHOUSE"

      - name: Generate configuration and SQL files
        run: |
          echo "AWS_ACCESS_KEY=$AWS_ACCESS_KEY" > .env
          echo "AWS_SECRET_KEY=$AWS_SECRET_KEY" >> .env
          python scripts/render_yaml.py $ENVIRONMENT
          python scripts/render_setup.py $ENVIRONMENT

      - name: Check Snowflake CLI Version
        run: |
          snow --version

      - name: Deploy UDFs and Stored Procedures
        run: |
          echo "Deploying UDFs and Stored Procedures..."
          snow sql -f scripts/setup_${ENVIRONMENT}.sql
          echo "Deploying CO2 Volatility UDF..."
          cd udfs_and_spoc/python_udf
          snow snowpark build
          snow snowpark deploy
          cd ../..
         
          # 2. Deploy Daily CO2 Changes UDF
          cd udfs_and_spoc/daily_co2_changes
          echo "Deploying Daily CO2 Changes UDF..."
          snow snowpark build
          snow snowpark deploy 
          cd ../..
         
          # 3. Deploy Weekly CO2 Changes UDF
          cd udfs_and_spoc/weekly_co2_changes
          echo "Deploying Weekly CO2 Changes UDF..."
          snow snowpark build
          snow snowpark deploy
          cd ../..
         
          # 4. Deploy CO2 Loading SP
          cd udfs_and_spoc/loading_co2_data_sp
          echo "Deploying CO2 Loading Stored Procedure..."
          snow snowpark build
          snow snowpark deploy
          cd ../..
         
          # 5. Deploy CO2 Harmonized SP
          cd udfs_and_spoc/co2_harmonized_sp
          echo "Deploying CO2 Harmonized Stored Procedure..."
          snow snowpark build
          snow snowpark deploy
          cd ../..
         
          # 6. Deploy CO2 Analytics SP
          cd udfs_and_spoc/co2_analytical_sp
          echo "Deploying CO2 Analytics Stored Procedure..."
          snow snowpark build
          snow snowpark deploy
          cd ../..

      - name: Orchestrate Tasks
        run: |        
          echo "Orchestrating tasks for $ENVIRONMENT environment..."
          snow sql -f scripts/orchestrate_tasks_${ENVIRONMENT}.sql
         
          echo "Deployment complete. Tasks successfully orchestrated."