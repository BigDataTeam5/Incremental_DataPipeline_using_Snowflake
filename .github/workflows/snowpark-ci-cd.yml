name: CO2 Data Pipeline CI/CD

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Set environment variables based on branch
        run: |
          # Determine environment based on branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
            echo "DATABASE_NAME=CO2_DB_PROD" >> $GITHUB_ENV
            echo "SCHEMA_NAME=RAW_CO2" >> $GITHUB_ENV
            echo "SNOWFLAKE_WAREHOUSE=CO2_WH_PROD" >> $GITHUB_ENV
            echo "SNOWFLAKE_ROLE=CO2_ROLE_PROD" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
            echo "DATABASE_NAME=CO2_DB_DEV" >> $GITHUB_ENV
            echo "SCHEMA_NAME=RAW_CO2" >> $GITHUB_ENV
            echo "SNOWFLAKE_WAREHOUSE=CO2_WH_DEV" >> $GITHUB_ENV
            echo "SNOWFLAKE_ROLE=CO2_ROLE_DEV" >> $GITHUB_ENV
          fi
          
          echo "Testing with $ENVIRONMENT environment"
          
      - name: Setup Snowflake connection profiles for testing
        run: |
          mkdir -p ~/.snowflake
          
          # Create connection profile for testing with authenticator
          cat > ~/.snowflake/connections.toml << EOF
          [default]
          account = "${{ secrets.SNOWFLAKE_ACCOUNT }}"
          user = "${{ secrets.SNOWFLAKE_USER }}"
          password = "${{ secrets.SNOWFLAKE_PASSWORD }}"
          authenticator = "snowflake"
          warehouse = "$SNOWFLAKE_WAREHOUSE"
          database = "$DATABASE_NAME"
          schema = "$SCHEMA_NAME"
          role = "$SNOWFLAKE_ROLE"
          
          [dev]
          account = "${{ secrets.SNOWFLAKE_ACCOUNT }}"
          user = "${{ secrets.SNOWFLAKE_USER }}"
          password = "${{ secrets.SNOWFLAKE_PASSWORD }}"
          authenticator = "snowflake"
          warehouse = "CO2_WH_DEV"
          role = "CO2_ROLE_DEV"
          database = "CO2_DB_DEV"
          schema = "RAW_CO2"
          
          [prod]
          account = "${{ secrets.SNOWFLAKE_ACCOUNT }}"
          user = "${{ secrets.SNOWFLAKE_USER }}"
          password = "${{ secrets.SNOWFLAKE_PASSWORD }}"
          authenticator = "snowflake"
          warehouse = "CO2_WH_PROD"
          role = "CO2_ROLE_PROD"
          database = "CO2_DB_PROD"
          schema = "RAW_CO2"
          EOF
          
          chmod 600 ~/.snowflake/connections.toml
          
      - name: Run tests
        run: |
          pytest tests/test_snowflake_connection.py
          pytest tests/test_s3_connection.py
          pytest tests/test_volatility_co2ppm.py
          pytest tests/test_daily_co2_changes.py
          pytest tests/test_weekly_co2_changes.py
          pytest tests/test_co2_harmonized_sp.py

  deploy:
    needs: test
    if: success() && (github.event_name != 'pull_request')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      # Install the Snowflake CLI with Snowpark support
      - name: Install Snowflake CLI
        run: |
          echo "Installing Snowflake CLI with Snowpark support..."
          # Download and install the latest Snowflake CLI
          pip install snowflake-cli-labs
          
          # Find the actual CLI command name
          echo "Looking for the snowflake CLI binary..."
          find /opt/hostedtoolcache/Python -name "snowflake*" -type f -executable
          
          # List installed command-line entry points 
          echo "Listing Python entry points:"
          pip list | grep snow
          
          # Show what's in the bin directory
          ls -la /opt/hostedtoolcache/Python/3.10.16/x64/bin/snow*
      
      - name: Set environment variables based on branch
        run: |
          # Set AWS credentials
          echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
          echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> $GITHUB_ENV
          echo "S3_OBJECT_NAME=${{ secrets.S3_OBJECT_NAME }}" >> $GITHUB_ENV
          echo "PARENT_FOLDER=${{ secrets.PARENT_FOLDER }}" >> $GITHUB_ENV
          
          # Set Snowflake credentials
          echo "SNOWFLAKE_ACCOUNT=${{ secrets.SNOWFLAKE_ACCOUNT }}" >> $GITHUB_ENV
          echo "SNOWFLAKE_USER=${{ secrets.SNOWFLAKE_USER }}" >> $GITHUB_ENV
          echo "SNOWFLAKE_PASSWORD=${{ secrets.SNOWFLAKE_PASSWORD }}" >> $GITHUB_ENV
          
          # Determine environment based on branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
            echo "DATABASE_NAME=CO2_DB_PROD" >> $GITHUB_ENV
            echo "SCHEMA_NAME=RAW_CO2" >> $GITHUB_ENV
            echo "CONN_PROFILE=prod" >> $GITHUB_ENV
            echo "SNOWFLAKE_WAREHOUSE=CO2_WH_PROD" >> $GITHUB_ENV
            echo "SNOWFLAKE_ROLE=CO2_ROLE_PROD" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
            echo "DATABASE_NAME=CO2_DB_DEV" >> $GITHUB_ENV
            echo "SCHEMA_NAME=RAW_CO2" >> $GITHUB_ENV
            echo "CONN_PROFILE=dev" >> $GITHUB_ENV
            echo "SNOWFLAKE_WAREHOUSE=CO2_WH_DEV" >> $GITHUB_ENV
            echo "SNOWFLAKE_ROLE=CO2_ROLE_DEV" >> $GITHUB_ENV
          fi
          
          echo "Deploying to $ENVIRONMENT environment"
          echo "Using database: $DATABASE_NAME"
          echo "Using warehouse: $SNOWFLAKE_WAREHOUSE"
          echo "Using role: $SNOWFLAKE_ROLE"
      
      - name: Setup Snowflake connection profiles
        run: |
          mkdir -p ~/.snowflake
          
          # Create connection profile for the environment with authenticator
          cat > ~/.snowflake/connections.toml << EOF
          [connections.dev]
          account = "${{ secrets.SNOWFLAKE_ACCOUNT }}"
          user = "${{ secrets.SNOWFLAKE_USER }}"
          password = "${{ secrets.SNOWFLAKE_PASSWORD }}"
          authenticator = "snowflake"
          warehouse = "CO2_WH_DEV"
          role = "CO2_ROLE_DEV"
          database = "CO2_DB_DEV"
          schema = "RAW_CO2"
          
          [connections.prod]
          account = "${{ secrets.SNOWFLAKE_ACCOUNT }}"
          user = "${{ secrets.SNOWFLAKE_USER }}"
          password = "${{ secrets.SNOWFLAKE_PASSWORD }}"
          authenticator = "snowflake"
          warehouse = "CO2_WH_PROD"
          role = "CO2_ROLE_PROD"
          database = "CO2_DB_PROD"
          schema = "RAW_CO2"
          EOF
          
          chmod 600 ~/.snowflake/connections.toml
      
      - name: Generate configuration and SQL files
        run: |
          # Create .env file for local tools
          cat > .env << EOF
          AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
          S3_OBJECT_NAME=${{ secrets.S3_OBJECT_NAME }}
          PARENT_FOLDER=${{ secrets.PARENT_FOLDER }}
          SNOWFLAKE_ENV=$ENVIRONMENT
          EOF
          
          # Create environment.json for any tools that use it
          mkdir -p templates
          cat > templates/environment.json << EOF
          {
            "environment": "$ENVIRONMENT"
          }
          EOF
          
          # Render YAML and SQL setup files
          python scripts/render_yaml.py $ENVIRONMENT
          python scripts/render_setup.py $ENVIRONMENT
      
      - name: Deploy UDFs and Stored Procedures
        run: |
          deploy_component() {
            local component_path=$1
            local component_name=$2
            echo "⏳ Deploying $component_name..."
            cd $component_path
            
            echo "Building $component_name in directory $(pwd)..."
            
            # Check if there's a YAML config file
            if [ -f "snowflake.yml" ]; then
              echo "Found snowflake.yml configuration file"
              cat snowflake.yml
            else
              echo "No snowflake.yml found, checking for other configuration files..."
              ls -la
            fi
            
            # Try different command names
            echo "Attempting to build with snowflake-cli..."
            if command -v snowflake-cli &> /dev/null; then
              snowflake-cli snowpark build --connection-name $CONN_PROFILE || { echo "❌ Build failed for $component_name"; exit 1; }
              snowflake-cli snowpark deploy --replace --connection-name $CONN_PROFILE || { echo "❌ Deploy failed for $component_name"; exit 1; }
            elif command -v snowcli &> /dev/null; then
              snowcli snowpark build --connection-name $CONN_PROFILE || { echo "❌ Build failed for $component_name"; exit 1; }
              snowcli snowpark deploy --replace --connection-name $CONN_PROFILE || { echo "❌ Deploy failed for $component_name"; exit 1; }
            else
              echo "Snowflake CLI not found. Installing using alternative method..."
              pip install "snowflake-cli-labs>=0.2.8"
              python -m snowflake.cli.snowcli snowpark build --connection-name $CONN_PROFILE || { echo "❌ Build failed for $component_name"; exit 1; }
              python -m snowflake.cli.snowcli snowpark deploy --replace --connection-name $CONN_PROFILE || { echo "❌ Deploy failed for $component_name"; exit 1; }
            fi
            
            cd ../..
            echo "✅ Successfully deployed $component_name"
          }
          
          echo "🚀 Starting deployments to $ENVIRONMENT environment..."
          
          # Deploy all components using the helper function
          deploy_component "udfs_and_spoc/python_udf" "CO2 Volatility UDF"
          deploy_component "udfs_and_spoc/daily_co2_changes" "Daily CO2 Changes UDF"
          deploy_component "udfs_and_spoc/weekly_co2_changes" "Weekly CO2 Changes UDF"
          deploy_component "udfs_and_spoc/loading_co2_data_sp" "CO2 Loading Stored Procedure"
          deploy_component "udfs_and_spoc/co2_harmonized_sp" "CO2 Harmonized Stored Procedure"
          deploy_component "udfs_and_spoc/co2_analytical_sp" "CO2 Analytics Stored Procedure"
          
          echo "🎉 All components deployed successfully!"
      
      - name: Orchestrate Tasks
        run: |
          echo "⏳ Orchestrating tasks for $ENVIRONMENT environment..."
          
          # Try different command names for SQL execution
          if command -v snowflake-cli &> /dev/null; then
            snowflake-cli sql -f scripts/orchestrate_tasks_${ENVIRONMENT}.sql --connection-name $CONN_PROFILE
          elif command -v snowcli &> /dev/null; then
            snowcli sql -f scripts/orchestrate_tasks_${ENVIRONMENT}.sql --connection-name $CONN_PROFILE
          else
            python -m snowflake.cli.snowcli sql -f scripts/orchestrate_tasks_${ENVIRONMENT}.sql --connection-name $CONN_PROFILE
          fi
          
          if [ $? -eq 0 ]; then
            echo "✅ Tasks successfully orchestrated for $ENVIRONMENT environment"
          else
            echo "❌ Task orchestration failed for $ENVIRONMENT environment"
            exit 1
          fi
          
          echo "🏁 Deployment complete!"